<?php


/**
 * Skeleton subclass for performing query and update operations on the 'tipo_categoria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 09/07/2013 11:41:50
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.crismoe
 */
class TipoCategoriaPeer extends BaseTipoCategoriaPeer {

    public static function checkTipoCategoria($idTipo, $idCat)
    {
        $c = new Criteria();
        $c->add(self::ID_CATEGORIA, $idCat, Criteria::EQUAL);
        $c->add(self::ID_TIPO, $idTipo, Criteria::EQUAL);
        return self::doCount($c);
    }
        
    public static function deleitaVinculo($id_tipo)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function getComboTiposByCategoria($id_cat,$lang)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_TIPO);
        $c->addSelectColumn(TipoI18nPeer::NOME_TIPO);
        $c->addSelectColumn(TipoPeer::FOTO);
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->addAscendingOrderByColumn(TipoPeer::NOME_TIPO);
        $c->addJoin(self::ID_TIPO, TipoI18nPeer::ID, Criteria::INNER_JOIN);
        $c->add(TipoI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        $c->add(self::ID_CATEGORIA, $id_cat, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_tipo']    = $res['ID_TIPO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $dato['foto']       = $res['FOTO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getComboTiposCategoriasEdit($id_cat, $lang)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        $c->addSelectColumn(self::ID_TIPO);
        $c->addSelectColumn(TipoI18nPeer::NOME_TIPO);
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->addAscendingOrderByColumn(TipoPeer::NOME_TIPO);        
        $c->add(self::ID_CATEGORIA, $id_cat, Criteria::EQUAL);
        $c->addJoin(self::ID_TIPO, TipoI18nPeer::ID, Criteria::INNER_JOIN);
        $c->add(TipoI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $datos[''] = 'Selecione um Tipo';
        while($res = $rs->fetch())
        {
            $datos[$res['ID_TIPO']] = $res['NOME_TIPO'];
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    
    
    
} // TipoCategoriaPeer
