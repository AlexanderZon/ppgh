<?php


/**
 * Skeleton subclass for performing query and update operations on the 'eventos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 21/07/2013 15:10:34
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.crismoe
 */
class EventosPeer extends BaseEventosPeer {
    
  public static function selectEventDetail($permalink, $lang)
  {
    $c = new Criteria();
    //Eliminamos la columnas de seleccion en caso de que esten definidas
    $c->clearSelectColumns();
    //Se Agregan las Columnas necesarias
    $c->addSelectColumn(self::ID_EVENTO);
    $c->addSelectColumn(EventosI18nPeer::TITULO);
    $c->addSelectColumn(self::FECHA_INICIO);
    $c->addSelectColumn(self::FECHA_FIN);
    $c->addSelectColumn(EventosI18nPeer::RESUMEN);
    $c->addSelectColumn(EventosI18nPeer::DESCRIPCION);
    $c->addSelectColumn(self::IMAGEN);
    $c->addSelectColumn(EventosI18nPeer::PERMALINK);

    $c->addJoin(self::ID_EVENTO, EventosI18nPeer::ID, Criteria::INNER_JOIN);
    $c->add(EventosI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
    $c->add(EventosI18nPeer::PERMALINK, $permalink);
    
    $rs = self::doSelectStmt($c);
    //Se recuperan los registros y se genera arreglo
    if ($rs->rowCount()==0) {
        return false;
    }
    while($res = $rs->fetch()) {
        $dato['id_evento']    = $res['ID_EVENTO'];
        $dato['titulo']      = $res['TITULO'];
        $dato['fecha_inicio']       = $res['FECHA_INICIO'];
        $dato['fecha_fin']       = $res['FECHA_FIN'];
        $dato['resumen']       = $res['RESUMEN'];
        $dato['descripcion']       = $res['DESCRIPCION'];
        $dato['image']      = $res['IMAGEN'];
        $dato['permalink']  = $res['PERMALINK'];        
    }
    if (!empty($dato)) {
        return $dato;
    }else {
        return false;
    }
    
  }
  
  public static function getEventosPagination($lang, $start, $limit, $busca = "", $fecha = "" )
  {
    $c = new Criteria();
    //Eliminamos la columnas de seleccion en caso de que esten definidas
    $c->clearSelectColumns();
    //Se Agregan las Columnas necesarias
    $c->addSelectColumn(self::ID_EVENTO);
    $c->addSelectColumn(EventosI18nPeer::TITULO);
    $c->addSelectColumn(self::FECHA_INICIO);
    $c->addSelectColumn(self::FECHA_FIN);
    $c->addSelectColumn(EventosI18nPeer::RESUMEN);
    $c->addSelectColumn(self::IMAGEN);
    $c->addSelectColumn(EventosI18nPeer::PERMALINK);

    
    if ($start) {
        $c->setLimit($limit);
        $c->setOffset($start);
    } else {
        $c->setLimit($limit);
    }
    if($fecha)
    {
        $c->add(self::FECHA_INICIO, $fecha,Criteria::EQUAL);        
    }
    
    $c->addJoin(self::ID_EVENTO, EventosI18nPeer::ID, Criteria::INNER_JOIN);
    $c->add(EventosI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
    $c->add(self::STATUS, '1', Criteria::EQUAL);
    $c->addDescendingOrderByColumn(self::FECHA_INICIO);
    $rs = self::doSelectStmt($c);
    //Se recuperan los registros y se genera arreglo
    if ($rs->rowCount()==0) {
        return false;
    }
    while($res = $rs->fetch()) {
        $dato['id_evento']    = $res['ID_EVENTO'];
        $dato['titulo']      = $res['TITULO'];
        $dato['fecha_inicio']       = $res['FECHA_INICIO'];
        $dato['fecha_fin']       = $res['FECHA_FIN'];
        $dato['body']       = $res['RESUMEN'];
        $dato['image']      = $res['IMAGEN'];
        $dato['permalink']  = $res['PERMALINK'];
        $datos[] = $dato;
    }
    if (!empty($datos)) {
        return $datos;
    }else {
        return false;
    }
  }
  
  public static function getCount($lang, $busca = "", $fecha = "")
  {
    $c = new Criteria();
    if($busca)
    {
        $criterio = $c->getNewCriterion(EventosI18nPeer::TITULO, '%'.$busca.'%', Criteria::LIKE);
        $criterio->addOr($c->getNewCriterion(EventosI18nPeer::RESUMEN, '%'.$busca.'%', Criteria::LIKE));
        $criterio->addOr($c->getNewCriterion(EventosI18nPeer::DESCRIPCION, '%'.$busca.'%', Criteria::LIKE));
        $c->add($criterio);
    }
    if($fecha)
    {
        $c->add(self::FECHA_INICIO, $fecha,Criteria::EQUAL);        
    }
    $c->add(self::STATUS, '1', Criteria::EQUAL);
    $c->addJoin(self::ID_EVENTO, EventosI18nPeer::ID, Criteria::INNER_JOIN);
    $c->add(EventosI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
    return self::doCount($c);
  }
  
  public static function getEventosMes($lang, $mes, $ano, $dias_mes)
  {
    $inicio = $ano.'-'.$mes.'-01';
    $fim = $ano.'-'.$mes.'-'.$dias_mes;
    
    $c = new Criteria();
    //Eliminamos la columnas de seleccion en caso de que esten definidas
    $c->clearSelectColumns();
    //Se Agregan las Columnas necesarias
    $c->addSelectColumn(self::ID_EVENTO);
    $c->addSelectColumn(EventosI18nPeer::PERMALINK);
    $c->addSelectColumn(self::FECHA_INICIO);
    $c->addJoin(self::ID_EVENTO, EventosI18nPeer::ID, Criteria::INNER_JOIN);
    $c->add(EventosI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
    
    $cFecha = $c->getNewCriterion(self::FECHA_INICIO, $inicio,Criteria::GREATER_EQUAL);
    $cFecha->addAnd($c->getNewCriterion(self::FECHA_INICIO, $fim, Criteria::LESS_EQUAL));
    $c->add($cFecha);
    $c->addAscendingOrderByColumn(self::FECHA_INICIO);
    $rs = self::doSelectStmt($c);
    //Se recuperan los registros y se genera arreglo
    if ($rs->rowCount()==0) {
        return false;
    }    
    while($res = $rs->fetch()) 
    {        
        $dia = date("j", strtotime($res['FECHA_INICIO'])); 
        $dato[$dia] = $res['FECHA_INICIO'];
    }
    if (!empty($dato)) {
        return $dato;
    }else {
        return false;
    }
  }
  
  

} // EventosPeer
