<?php


/**
 * Skeleton subclass for performing query and update operations on the 'producto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 08/07/2013 06:25:58
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.crismoe
 */
class ProductoPeer extends BaseProductoPeer {
    
    public static function getAllProductos()
    {
        $c = new Criteria();
        return self::doSelect($c);
    }
    
    public static function getProductosByDestaque()
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(self::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);
        
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->add(self::DESTAQUE, 1, Criteria::EQUAL);
        $c->setLimit(6);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    public static function getProductosByCategoria($id_cat,$lang)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(ProductoI18nPeer::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);
        
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->addJoin(self::ID_PRODUCTO, ProductoI18nPeer::ID, Criteria::INNER_JOIN);
        
        //$c->add(self::STATUS, 1, Criteria::EQUAL);
        $c->add(self::ID_CATEGORIA, $id_cat, Criteria::EQUAL);
        $c->add(ProductoI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getProductosByLinea($id_linea)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(self::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);
        
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        $c->add(self::ID_LINEA, $id_linea, Criteria::EQUAL);
        $c->setLimit(4);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getProductosByTipo($id_tipo)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(self::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);
        
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        $c->setLimit(4);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }

    public static function getProductosByFiltro($id_tipo, $id_linea, $id_caracteristica)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(self::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);        
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        $c->add(self::STATUS, 1, Criteria::EQUAL);
        if($id_tipo)
        {
            $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        }
        if($id_linea)
        {
            $c->add(self::ID_LINEA, $id_linea, Criteria::EQUAL);
        }
        if($id_caracteristica)
        {
            $c->addJoin(self::ID_PRODUCTO, ProductoCaracteristicaPeer::ID_PRODUCTO, Criteria::INNER_JOIN);
            $c->add(ProductoCaracteristicaPeer::ID_CARACTERISTICA, $id_caracteristica, Criteria::EQUAL);
        }
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getProductosPagination($lang, $start, $limit, $id_categoria = "", $id_tipo = "", $id_linea = "", $id_caracteristica = "")
    {
        
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_PRODUCTO);
        $c->addSelectColumn(ProductoI18nPeer::NOME_PRODUCTO);
        $c->addSelectColumn(self::FOTO);
        $c->addSelectColumn(TipoPeer::NOME_TIPO);  
        if ($start) {
            $c->setLimit($limit);
            $c->setOffset($start);
        } else {
            $c->setLimit($limit);
        }
        //Filtros        
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        //$c->add(self::STATUS, '1', Criteria::EQUAL);
        if($id_categoria)
        {
            $c->add(self::ID_CATEGORIA, $id_categoria, Criteria::EQUAL);
        }
        if($id_tipo)
        {
            $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        }
        if($id_linea)
        {
            $c->add(self::ID_LINEA, $id_linea, Criteria::EQUAL);            
        }
        if($id_caracteristica)
        {
            $c->addJoin(self::ID_PRODUCTO, ProductoCaracteristicaPeer::ID_PRODUCTO, Criteria::INNER_JOIN);
            $c->add(ProductoCaracteristicaPeer::ID_CARACTERISTICA, $id_caracteristica, Criteria::EQUAL);
        }
        $c->addJoin(self::ID_PRODUCTO, ProductoI18nPeer::ID, Criteria::INNER_JOIN);
        $c->add(ProductoI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        if ($rs->rowCount()==0) {
            return false;
        }
        while($res = $rs->fetch()) {
            $dato['id_producto']    = $res['ID_PRODUCTO'];
            $dato['nome_producto']  = $res['NOME_PRODUCTO'];
            $dato['foto']           = $res['FOTO'];
            $dato['nome_tipo']  = $res['NOME_TIPO'];
            $datos[] = $dato;
        }
        if (!empty($datos)) {
            return $datos;
        }else {
            return false;
        }
    }
    
    public static function getCount($lang, $id_categoria = "", $id_tipo = "", $id_linea = "", $id_caracteristica = "")
    {
        $c = new Criteria();
        $c->addJoin(self::ID_TIPO, TipoPeer::ID_TIPO, Criteria::INNER_JOIN);
        //$c->add(self::STATUS, 1, Criteria::EQUAL);
        if($id_categoria)
        {
            $c->add(self::ID_CATEGORIA, $id_categoria, Criteria::EQUAL);
        }
        if($id_tipo)
        {
            $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        }
        if($id_linea)
        {
            $c->add(self::ID_LINEA, $id_linea, Criteria::EQUAL);
        }
        if($id_caracteristica)
        {
            $c->addJoin(self::ID_PRODUCTO, ProductoCaracteristicaPeer::ID_PRODUCTO, Criteria::INNER_JOIN);
            $c->add(ProductoCaracteristicaPeer::ID_CARACTERISTICA, $id_caracteristica, Criteria::EQUAL);
        }
        $c->addJoin(self::ID_PRODUCTO, ProductoI18nPeer::ID, Criteria::INNER_JOIN);
        $c->add(ProductoI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        return self::doCount($c);
    }
} // ProductoPeer
