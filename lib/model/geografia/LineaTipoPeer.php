<?php


/**
 * Skeleton subclass for performing query and update operations on the 'linea_tipo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 09/07/2013 12:11:50
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.crismoe
 */
class LineaTipoPeer extends BaseLineaTipoPeer {
    
    
    public static function checkLineaByTipo($idLinea, $idTipo)
    {
        $c = new Criteria();
        $c->add(self::ID_LINEA, $idLinea, Criteria::EQUAL);
        $c->add(self::ID_TIPO, $idTipo, Criteria::EQUAL);
        return self::doCount($c);
    }
            
    public static function deleitaVinculo($id_linea)
    {
        $con = Propel::getConnection();
	// select from...
	$c1 = new Criteria();
        $c1->add(self::ID_LINEA, $id_linea, Criteria::EQUAL);
	// delete
        BasePeer::doDelete($c1, $con);
    }
    
    public static function getComboLineaByTipo($id_tipo,$lang)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_LINEA);
        $c->addSelectColumn(LineaI18nPeer::NOME_LINEA);
        //Filtros        
        $c->addJoin(self::ID_LINEA, LineaPeer::ID_LINEA, Criteria::INNER_JOIN);
        $c->addJoin(self::ID_LINEA, LineaI18nPeer::ID, Criteria::INNER_JOIN);
        $c->addAscendingOrderByColumn(LineaPeer::NOME_LINEA);
        
        $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        $c->add(LineaI18nPeer::LANGUAGE, $lang, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        while($res = $rs->fetch())
        {
            $dato['id_linea']   = $res['ID_LINEA'];
            $dato['nome_linea'] = $res['NOME_LINEA'];
            $datos[] = $dato;
        }
        if(!empty($datos))
        {
            return $datos;
        }else{
            return false;
        }
    }
    
    public static function getComboLineaTiposEdit($id_tipo)
    {
        $c = new Criteria();
        //Eliminamos la columnas de seleccion en caso de que esten definidas
        $c->clearSelectColumns();
        //Se Agregan las Columnas necesarias
        $c->addSelectColumn(self::ID_LINEA);
        $c->addSelectColumn(LineaPeer::NOME_LINEA);
        //Filtros        
        $c->addJoin(self::ID_LINEA, LineaPeer::ID_LINEA, Criteria::INNER_JOIN);
        $c->addAscendingOrderByColumn(LineaPeer::NOME_LINEA);
        
        $c->add(self::ID_TIPO, $id_tipo, Criteria::EQUAL);
        //Ejecucion de consulta
        $rs = self::doSelectStmt($c);
        //Se recuperan los registros y se genera arreglo
        $datos[''] = 'Selecione uma linha';
        while($res = $rs->fetch())
        {
            $datos[$res['ID_LINEA']] = $res['NOME_LINEA'];
        }
        if(!empty($datos)){
            return $datos;
        }else{
            return false;
        }
    }
    
} // LineaTipoPeer
